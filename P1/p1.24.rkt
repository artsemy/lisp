#lang racket
(define (runtime) (current-milliseconds))

(define (timed-prime-test-v2 n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (cond ((fast-prime? n 10) (report-prime (- (runtime) start-time)))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
;-----------------------------------------------------
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
(define (fermat-test n)
  (define (try-it a)
    ( = (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
(define (square x) (* x x))
;------------------------------------------------------
(require "p1.22.rkt")

(timed-prime-test 1000000007)
(timed-prime-test-v2 1000000007)
(timed-prime-test 1000000009)
(timed-prime-test-v2 1000000009)
(timed-prime-test 1000000021)
(timed-prime-test-v2 1000000021)
;(timed-prime-test 10000000019)
;(timed-prime-test-v2 10000000019)
;(timed-prime-test 10000000033)
;(timed-prime-test-v2 10000000033)
;(timed-prime-test 10000000061)
;(timed-prime-test-v2 10000000061)
;(timed-prime-test 100000000003)
;(timed-prime-test-v2 100000000003)
;(timed-prime-test 100000000019)
;(timed-prime-test-v2 100000000019)
;(timed-prime-test 100000000057)
;(timed-prime-test-v2 100000000057)
;(timed-prime-test 1000000000039)
;(timed-prime-test-v2 1000000000039)
;(timed-prime-test 1000000000061)
;(timed-prime-test-v2 1000000000061)
;(timed-prime-test 1000000000063)
;(timed-prime-test-v2 1000000000063)