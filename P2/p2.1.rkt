#lang racket
(define (gcd n d)
  (if (= d 0)
      n
      (gcd d (remainder n d))))

;(define (make-rat n d) (cons n d))
;(define (make-rat n d)
;  (let ((g (gcd n d)))
;    (cons (/ n g) (/ d g))))
(define (make-rat n d)
  (let ((g (gcd n d)))
    (cond
      ((> (* n d) 0) (cons (/ n g) (/ d g)))
      ((< (* n d) 0) (cons (/ (- n) g) (/ (- d) g)))
      (else (cons 0 1)))))

(define (numer x) (car x))
(define (denom x) (cdr x))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define minus-one-half (make-rat (- 1) 2))
(define one-half (make-rat 1 2))
(print-rat (mul-rat minus-one-half one-half))